#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const util = require('util');
const crypto = require('crypto');
const exec = util.promisify(require('child_process').exec);
const { spawn } = require('child_process');
const cfg = require('../src/config/cfg');
const log4js = require('../src/config/logger');


const logger = log4js.getLogger('expo-srv');
logger.info('Launching...');

const dest = path.resolve(cfg.get('data.dir'), 'app');
logger.info(dest);

const repo = process.env.REPO !== undefined
  ? process.env.REPO : undefined;
const branch = process.env.BRANCH !== undefined
  ? process.env.BRANCH : 'master';
const username = process.env.USERNAME !== undefined
  ? process.env.USERNAME : undefined;
const password = process.env.PASSWORD !== undefined
  ? process.env.PASSWORD : undefined;
const verbose = process.env.VERBOSE !== undefined
  ? process.env.VERBOSE : false;
const gitPullInterval = process.env.GIT_PULL_INTERVAL !== undefined
  ? parseInt(process.env.GIT_PULL_INTERVAL, 10) : 30;
const delay = gitPullInterval * 60 * 1000;
const web = process.env.WEB !== undefined
  ? process.env.web : false;

const fnPackage = `${dest}/package.json`;
const fnApp = `${dest}/app.json`;
let fhPackage = '';
let fhApp = '';
let expo;
let timerId;


main();
logger.info('Launched');


async function main() {
  if (!fs.existsSync(`${dest}/package.json`))
    await gitClone();
  await gitPull();
  await install();
  runExpo();
  getDigests();
  watch();
  timerId = setInterval(gitPull, delay);
}

async function gitClone() {
  if (repo === undefined) {
    console.log('repo dir === undefined');
    logger.error('repo dir === undefined');
    process.exit(1);
  }

  let cmd = `cd ${cfg.get('data.dir')}`;
  cmd += ` && git clone -b ${branch} `;
  let auth = '';
  if (username !== undefined && password !== undefined)
    auth = `${username}:${password}@`;
  cmd += repo.replace('//', `//${auth}`);
  cmd += ` --recursive ${dest}`;
  if (auth !== '')
    cmd += ` && git config --global url."https://${auth}github.com/".insteadOf "https://github.com/"`;
  cmd += ` && cd ${dest}`;
  cmd += ` && yarn install`;
  console.log(`cmd: '${cmd}'`);
  const { stdout, stderr } = await exec(cmd);
  verbose && console.log('gitClone() stdout:', stdout);
  verbose && console.error('gitClone() stderr:', stderr);
  return { stdout, stderr };
}

async function gitPull() {
  let { stdout, stderr } = await exec(`cd ${dest} && git pull`);
  console.log('gitPull() stdout:', stdout);
  console.error('gitPull() stderr:', stderr);
  return { stdout, stderr };
}
async function install() {
  const { stdout, stderr } = await exec(`cd ${dest} && yarn install`);
  console.log('install() stdout:', stdout);
  console.error('install() stderr:', stderr);
  return { stdout, stderr };
}

function watch() {
  fs.watchFile(fnPackage, async (curr, prev) => {
    if (prev.mtime !== curr.mtime) {
      /*
      const digest = getHash(fnPackage);
      if (digest !== fhPackage) {
        fhPackage = digest;
        //expo.stdin.end();
        //expo.kill('SIGHUP');
        await install();
        runExpo();
      }
      */
    }
  });

  fs.watchFile(fnApp, async (curr, prev) => {
    if (prev.mtime !== curr.mtime) {
      /*
      const digest = getHash(fnApp);
      if (digest !== fhApp) {
        fhApp = digest;
        //expo.stdin.end();
        //expo.kill('SIGHUP');
        runExpo();
      }
      */
    }
  });
}

async function runExpo() {
  let options = ['start', '--non-interactive'];
  let env = {};
  if (cfg.get('https') && cfg.get('ssl.crt.file') && cfg.get('ssl.key.file')) {
    options.push('--https');
    env.SSL_CRT_FILE = cfg.get('ssl.crt.file');
    env.SSL_KEY_FILE = cfg.get('ssl.key.file');
  }
  if (cfg.get('web'))
    options.push('--web');

  // '--public-url' [url]
  console.error(options);
  expo = spawn('expo', options, {
    cwd: `${dest}`, //, env: Object.assign({}, process.env, env)
  });

  expo.stdout.on('data', (data) => {
    verbose && console.log('expo stdout:', data.toString());
  });

  expo.stderr.on('data', (data) => {
    verbose && console.error('expo stderr:', data.toString());
  });

  expo.on('close', (code) => {
    if (code !== 0) {
      verbose && console.log(`expo process exited with code ${code}`);
    }
  });
  return expo;
}


function getDigests() {
  fhPackage = getHash(fnPackage);
  fhApp = getHash(fnApp);
}

function getHash(fileName) {
  const hash = crypto.createHash('sha256');
  const data = fs.readFileSync(fileName, { encoding: 'utf8' });
  hash.update(data);
  return hash.digest('hex');
}
